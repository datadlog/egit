{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"e(g)it \u00b6 e(g)it \u2192 e(d)it, e(g)it is an app for replacing text in many files across multiple GitHub repositories. Quick Start Features \u00b6 Clones the configured Github repositories to your local. From a specified base branch, creates a feature branch. Replaces the content in files if it finds the matching text exists in the local repositories, if there is a file pattern specified in the configuration file, the app replaces only in those files. Commits the changes and creates a pull request for code review. Tech \u00b6 e(g)it uses a number of open source projects to work properly: Python - Python for the backend. GitPython - Python library used to interact with git repositories. PyYAML - PyYAML features a complete YAML 1.1 parser. MkDocs - MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Flake8 - Flake8 is a great toolkit for checking your code base against coding style (PEP8), programming errors and to check cyclomatic complexity. Tox - Tox is a generic virtualenv management and test command line tool. Twine - Twine is a utility for publishing Python packages on PyPI. CodeQL - CodeQL is the analysis engine used by developers to automate security checks, and by security researchers to perform variant analysis. VSCode - Visual Studio Code is a source-code editor.","title":"Home"},{"location":"#egit","text":"e(g)it \u2192 e(d)it, e(g)it is an app for replacing text in many files across multiple GitHub repositories. Quick Start","title":"e(g)it"},{"location":"#features","text":"Clones the configured Github repositories to your local. From a specified base branch, creates a feature branch. Replaces the content in files if it finds the matching text exists in the local repositories, if there is a file pattern specified in the configuration file, the app replaces only in those files. Commits the changes and creates a pull request for code review.","title":"Features"},{"location":"#tech","text":"e(g)it uses a number of open source projects to work properly: Python - Python for the backend. GitPython - Python library used to interact with git repositories. PyYAML - PyYAML features a complete YAML 1.1 parser. MkDocs - MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Flake8 - Flake8 is a great toolkit for checking your code base against coding style (PEP8), programming errors and to check cyclomatic complexity. Tox - Tox is a generic virtualenv management and test command line tool. Twine - Twine is a utility for publishing Python packages on PyPI. CodeQL - CodeQL is the analysis engine used by developers to automate security checks, and by security researchers to perform variant analysis. VSCode - Visual Studio Code is a source-code editor.","title":"Tech"},{"location":"authors/","text":"Credits \u00b6 Development Lead \u00b6 Naveen Thurimerla nawinto99@gmail.com Contributors \u00b6 None yet. Why not be the first?","title":"Authors"},{"location":"authors/#credits","text":"","title":"Credits"},{"location":"authors/#development-lead","text":"Naveen Thurimerla nawinto99@gmail.com","title":"Development Lead"},{"location":"authors/#contributors","text":"None yet. Why not be the first?","title":"Contributors"},{"location":"changelog/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. 1.0.0 - 2021-10-11 \u00b6 Added \u00b6 Initial release Changed \u00b6 Removed \u00b6 Security \u00b6","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file.","title":"Changelog"},{"location":"changelog/#100-2021-10-11","text":"","title":"1.0.0 - 2021-10-11"},{"location":"changelog/#added","text":"Initial release","title":"Added"},{"location":"changelog/#changed","text":"","title":"Changed"},{"location":"changelog/#removed","text":"","title":"Removed"},{"location":"changelog/#security","text":"","title":"Security"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are always welcome and much appreciated! Every little amount helps, and credit will be provided whenever possible. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/datadlog/egit/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 egit could always use more documentation, whether as part of the official egit docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/datadlog/egit/issues . If you are proposing a feature: Describe how it would work in detail. Keep the scope as little as possible to make implementation easy. Remember that this is a volunteer-driven effort, so any help is appreciated. Get Started! \u00b6 Ready to contribute? Here's how to set up egit for local development. Fork the egit repo on GitHub. Locally clone your fork. $ git clone git@github.com:your_name_here/egit.git Make sure your fork is set up for local development. $ cd egit $ python -m pip install --upgrade pip $ pip install poetry $ poetry install -E dev -E test -E doc Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Use the GitHub website to submit a pull request. Pull Request Guidelines \u00b6 Before submitting a pull request, make sure it complies with the following guidelines: Tests should be included in the pull request. The docs should be updated if the pull request adds any functionality. Put your new feature in a function with a docstring and add it to the README.md feature list. The pull request should work for Python 3.9. Check https://github.com/datadlog/egit/actions and Check to see if the tests pass for the Python version.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are always welcome and much appreciated! Every little amount helps, and credit will be provided whenever possible. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/datadlog/egit/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"egit could always use more documentation, whether as part of the official egit docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/datadlog/egit/issues . If you are proposing a feature: Describe how it would work in detail. Keep the scope as little as possible to make implementation easy. Remember that this is a volunteer-driven effort, so any help is appreciated.","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up egit for local development. Fork the egit repo on GitHub. Locally clone your fork. $ git clone git@github.com:your_name_here/egit.git Make sure your fork is set up for local development. $ cd egit $ python -m pip install --upgrade pip $ pip install poetry $ poetry install -E dev -E test -E doc Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Use the GitHub website to submit a pull request.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before submitting a pull request, make sure it complies with the following guidelines: Tests should be included in the pull request. The docs should be updated if the pull request adds any functionality. Put your new feature in a function with a docstring and add it to the README.md feature list. The pull request should work for Python 3.9. Check https://github.com/datadlog/egit/actions and Check to see if the tests pass for the Python version.","title":"Pull Request Guidelines"},{"location":"getting-started/","text":"Getting started \u00b6 e(g)it is a app for replace text in many files across multiple Github repositories. If you're familiar with Python, you can install e(g)it with pip , the Python package manager. In case you're running into problems, consult the troubleshooting section. Prerequisites \u00b6 Install git Install Python Installation \u00b6 with pip recommended \u00b6 e(g)it can be installed with pip : pip install egit with git \u00b6 e(g)it can be directly used from GitHub by cloning the repository into a subfolder of your project root which might be useful if you want to use the very latest version: Clone repository to your local $ git clone https://github.com/datadlog/egit.git Ensure poetry is installed, if not follow below. $ cd egit $ python -m pip install --upgrade pip $ pip install poetry Install dependencies and start your virtualenv: $ poetry install","title":"Installation"},{"location":"getting-started/#getting-started","text":"e(g)it is a app for replace text in many files across multiple Github repositories. If you're familiar with Python, you can install e(g)it with pip , the Python package manager. In case you're running into problems, consult the troubleshooting section.","title":"Getting started"},{"location":"getting-started/#prerequisites","text":"Install git Install Python","title":"Prerequisites"},{"location":"getting-started/#installation","text":"","title":"Installation"},{"location":"getting-started/#with-pip-recommended","text":"e(g)it can be installed with pip : pip install egit","title":"with pip"},{"location":"getting-started/#with-git","text":"e(g)it can be directly used from GitHub by cloning the repository into a subfolder of your project root which might be useful if you want to use the very latest version: Clone repository to your local $ git clone https://github.com/datadlog/egit.git Ensure poetry is installed, if not follow below. $ cd egit $ python -m pip install --upgrade pip $ pip install poetry Install dependencies and start your virtualenv: $ poetry install","title":"with git"},{"location":"license/","text":"MIT License Copyright \u00a9 2021 Data Dlog Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"troubleshooting/","text":"","title":"Troubleshooting"},{"location":"usage/","text":"Usage \u00b6 Generate access token \u00b6 Create a GitHub access token to use when submitting pull requests Modify Configuration \u00b6 Modify the configuration file egit/config/app_config.yml github_account: Github account name or organization name. base_branch: For building feature branches, start with the base branch. feature_branch: Give the name of the feature branch. replace_text: In the key value pair, enter the text you want to replace(left: old value, right: new value). file_pattern: If there is a file extension, specify it; otherwise, leave it blank. github_access_token: Copy the access token that was generated in Step 1 . Add the Github repositories to the list. egit/config/git_repos_config.json Run the application \u00b6 $ cd egit $ poetry run egit","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#generate-access-token","text":"Create a GitHub access token to use when submitting pull requests","title":"Generate access token"},{"location":"usage/#modify-configuration","text":"Modify the configuration file egit/config/app_config.yml github_account: Github account name or organization name. base_branch: For building feature branches, start with the base branch. feature_branch: Give the name of the feature branch. replace_text: In the key value pair, enter the text you want to replace(left: old value, right: new value). file_pattern: If there is a file extension, specify it; otherwise, leave it blank. github_access_token: Copy the access token that was generated in Step 1 . Add the Github repositories to the list. egit/config/git_repos_config.json","title":"Modify Configuration"},{"location":"usage/#run-the-application","text":"$ cd egit $ poetry run egit","title":"Run the application"}]}